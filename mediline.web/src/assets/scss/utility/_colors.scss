/*
    This CSS file is used to map out the colors and themes of the app.
    This approach ensures that our colors remain consistent throuhgout the site.
*/

// Color-scheme for the themes
$colors: (
    primary: (
        100: hsl(210, 70%, 10%),
        200: hsl(210, 70%, 20%),
        300: hsl(210, 70%, 30%),
        400: hsl(210, 70%, 40%),
        500: hsl(210, 70%, 50%),
        600: hsl(210, 70%, 60%),
        700: hsl(210, 70%, 70%),
        800: hsl(210, 70%, 80%),
        900: hsl(210, 70%, 90%)
    ),
    secondary: (
        100: hsl(200, 45%, 50%),
        200: hsl(200, 45%, 60%),
        300: hsl(200, 45%, 70%),
        400: hsl(200, 45%, 80%),
        500: hsl(200, 45%, 90%)
    ),
    neutral: (
        100: hsl(0, 0%, 0%),
        200: hsl(0, 0%, 10%),
        300: hsl(0, 0%, 20%),
        400: hsl(0, 0%, 30%),
        500: hsl(0, 0%, 40%),
        600: hsl(0, 0%, 50%),
        700: hsl(0, 0%, 60%),
        800: hsl(0, 0%, 70%),
        900: hsl(0, 0%, 80%),
        1000: hsl(0, 0%, 90%),
        1100: hsl(0, 0%, 100%)
    ),
    neutral-expanded: (
        100: hsl(0, 0%, 50%),
        200: hsl(0, 0%, 55%),
        300: hsl(0, 0%, 60%),
        400: hsl(0, 0%, 65%),
        500: hsl(0, 0%, 70%),
        600: hsl(0, 0%, 75%),
        700: hsl(0, 0%, 80%),
        800: hsl(0, 0%, 85%),
        900: hsl(0, 0%, 90%),
        1000: hsl(0, 0%, 95%),
        1100: hsl(0, 0%, 100%)
    ),
    dark: (
        100: hsl(200, 30%, 15%),
        200: hsl(200, 30%, 25%),
        300: hsl(200, 30%, 35%),
        400: hsl(200, 30%, 45%),
        500: hsl(200, 30%, 55%)
    ),
    primary-neutral: (
        100: hsl(210, 20%, 45%),
        200: hsl(210, 20%, 55%),
        300: hsl(210, 20%, 65%),
        400: hsl(210, 20%, 75%),
        500: hsl(210, 20%, 85%)
    ),
    primary-dark: (
        100: hsl(210, 40%, 80%),
        200: hsl(210, 40%, 81%),
        300: hsl(210, 40%, 82%),
        400: hsl(210, 40%, 83%),
        500: hsl(210, 40%, 84%),
        600: hsl(210, 40%, 85%),
        700: hsl(210, 40%, 86%),
        800: hsl(210, 40%, 87%),
        900: hsl(210, 40%, 88%),
    ),
    success: (
        100: hsl(120, 45%, 35%),
        200: hsl(120, 45%, 45%),
        300: hsl(120, 45%, 55%),
        400: hsl(120, 45%, 65%),
        500: hsl(120, 45%, 75%),
        600: hsl(120, 45%, 85%)
    ),
    caution: (
        100: hsl(50, 60%, 35%),
        200: hsl(50, 60%, 45%),
        300: hsl(50, 60%, 55%),
        400: hsl(50, 60%, 65%),
        500: hsl(50, 60%, 75%),
        600: hsl(50, 60%, 85%),
    ),
    warning: (
        100: hsl(0, 70%, 40%),
        200: hsl(0, 70%, 50%),
        300: hsl(0, 70%, 60%),
        400: hsl(0, 70%, 70%),
        500: hsl(0, 70%, 80%),
        600: hsl(0, 70%, 90%)
    ),
    user: (
        100: hsl(250, 60%, 40%),
        200: hsl(250, 60%, 50%),
        300: hsl(250, 60%, 60%),
        400: hsl(250, 60%, 70%),
        500: hsl(250, 60%, 80%),
    ),
    highlight-primary: (
        100: hsl(200, 100%, 20%),
        200: hsl(200, 100%, 30%),
        300: hsl(200, 100%, 40%),
        400: hsl(200, 100%, 50%),
        500: hsl(200, 100%, 60%),
        600: hsl(200, 100%, 70%),
        700: hsl(200, 100%, 80%),
        800: hsl(200, 100%, 90%),
    ),
);

// Generates utility classes for the color and background
@each $color, $shades in $colors {
    @each $shade, $value in $shades {
        .text-#{$color}-#{$shade} {
            color: $value;
        }
        .bg-#{$color}-#{$shade} {
            background: $value !important;
        }
        .fill-#{$color}-#{$shade} {
            --clr-fill: #{$value};
        }
        .input-text-#{$color}-#{$shade} input {
            color: $value !important;
        }
        .input-text-placeholder-#{$color}-#{$shade} input::placeholder {
            color: $value !important;
        }
        .outline-#{$color}-#{$shade} {
            --clr-line-color: #{$value};
        }
        .shadow-#{$color}-#{$shade} {
            --clr-box-shadow: #{$value};
        }
        .hover-#{$color}-#{$shade}:hover {
            color:  $value;
        }
        .hover-outline-#{$color}-#{$shade}:hover {
            --clr-line-color: #{$value};
        }
        .hover-group-#{$color}-#{$shade} > a:hover {
            color:  $value;
        }
    }
}

// Utility class for removing backgrounds
.bg-0 {
    background: transparent !important;
}

// Utility class for applying predefined gradients to an element
.gradient {
    &-dark {
        @include linear-gradient(to bottom, $gradient-dark);
    }
    &-light {
        @include linear-gradient(to bottom, $gradient-light);
    }
    &-white {
        @include linear-gradient(to bottom, $gradient-white);
    }
    &-blue {
        @include linear-gradient(to bottom, $gradient-blue);
    }
}

// Creates a property for each color and shade
:root {
    @each $color, $shades in $colors {
        @each $shade, $value in $shades {
            --clr-#{$color}-#{$shade}: #{$value};
        }
    }
}
